1. CGAL 라이브러리를 이용하면 General Polygon을 그릴수 있고, Boolean Operation도 가능함

2. General Polygon을 구현하기 위해서 CGAL에서는 Gmpq라는 라이브러리를 도입했는데,
   이것은 완벽한 숫자를 구현하기 위한 것임 (디지털 컴퓨터에서 발생하는 Truncation Error 등의 문제를 해결한 라이브러리)
   이때문에 코딩시 디버깅이 무척 힘들어짐. 왜냐하면 디버깅창에 데이터값이 바로 출력되지 않고, 꽁꽁 숨어 있음

3. CAD (?) 아니, 형상모델링을 위한 엔진을 개발함에 있어 General Polygon을 이용해 그림을 그리는 것 까지는 좋으나,
   General Polygon을 이동, 회전 시켜야 할 필요성이 발생함
   헌데, General Polygon을 직접적으로 회전 또는 이동할 방법이 없었음
   결국 General Polygon을 이루는 절점들을 회전 또는 이동해서 Polygon이 회전 또는 이동하는 것 처럼 구현해야 했음
   여기서 문제가 절점을 회전 또는 이동이 쉽지 않은 것. 특히 회전에 문제가 있음
   pi자체가 원래는 무리수이므로 컴퓨터에서 계산시에 pi를 소숫점 특정자리까지 approximate해서 사용하게 되는데
   이때문에 동일점에 대한 오차가 발생하기시작함
   예컨데, P1(1,1)을 90도 회전시키고 다시 270도 회전시키면 원래 자리로 와야하지만, 90도 회전시 정확한 90도가 되지 않고,
   여기서 또 270도 회전시 정확한 270도가 되지 않아 수학적으로는 동일 위치지만 실제 값에는 오차가 발생하게 되는 것
   즉, 삼각함수를 적용하게 되면 오차가 어쩔수 없이 발생하게 되는것
   물론, 나의 지식이 짧아 실제로 구현방법이 있을 수 있음에도 불구하고 어쩔수 없다고 판단하고있는지도 모름
   어쨋건, 현재 나의 지식으로는 오차의 발생은 어쩔수 없는것
   또한 수학함수, sin, cos, tan 등은 cmath 에서 제공을 해 주고 있는데, CGAL의 데이터형을 기본적으로 받아 드릴수 없는 함수임
   만약 CGAL이 삼각 함수를 사용함에 있어, 이론과 완벽히 동일한 결과를 내줄 수 있었다고 하면 CGAL::sin, CGAL::cos 등과 같은 함수가 존재 했을 것 같음
   헌데, 찾아보면 없음
   sin 함수를 사용하기 위해서는 CGAL::to_double() 이라는 함수를 사용해 gmpq 데이터형을 double 형으로 변환한 다음 연산을 하게 되어있음(CGAL 예제에서..)
   CGAL::to_double 함수자체가 오차를 인정하겠다는 approximate 함수임

4. 이상에서 언급한바와 같이 모델링 Engine개발에서 문제가 되는 것은 동일점 인지에 있어 오차발생인데,
   아주 근소한 오차만 발생하더라도 Boolean Operation에서 원하는 결과를 얻기 힘들어짐.

5. 그래서 생각한 솔루션이 뭐냐면,
   일단 오차는 안고가되, 마지막 요소 생성을 위한 폴리곤을 만들때는 동일점 허용 오차를 두어 
   이론적으로는 동일한 형상이지만 데이터에 아주 근소한 오차가있어 서로 다른 객체(형상)로 인식하는 현상을 없애보자
   만약 Rotate, Move등의 연산을 많이 적용해 오차가 많이 쌓여 실제로 동일한 지점인데, 동일한 지점으로 인식 못하는 문제가 발생한다면
   이는 너무 고민하지 말자. 그냥 다른점이라고 생각하면 그만이다. 

6. 자 그러면, 이제 CGAL 함수들과 내가 개발한 Move, Rotate 등의 함수를 이용해 형상 모델링을 할 수 있고,
   이제 이 형상으로부터 요소생성을 위한 기저 포인트 (Base Vertecs)를 얻기 위한 작업이 매우 중요해 지는데,
   현재 이를 구현하다가 지쳐 있는 상태임

7. 뭐 실제로는 되던 안되던 구현은 해 놨고, 이를 직접 화면에 그려봐야 하는데 이를 못하고있음
   물론 요소생성도 해서 그 결과를 확인해 봐야 함.
   이작업이 참 힘듦

8. triangle 이라는 요소생성기가 이미 python의 라이브러리로 뤱핑되어 있음
   그래서 이 wrapping 된 라이브러리를 이용해 요소생성을 해야할지... 아니면 나의 engine에서 나의 방식으로 triangle을 wrapping 해야할지 고민하고잇음
   원래 나의 개발 취지에는 이미 wrapping 된 triangle 라이브러리를 활용하는 것이 맞다고 판단 되려고 하고 있음

9. 만약 기존 wrapping된 라이브러리를 활용한다 치면 나의 엔진에서 python으로 넘겨줘야할 데이터들이 무엇이 있으며, 어떻게 넘겨주어야 하는지 고민해 봐야함
   결국 C++와 Python의 연동법을 좀 더 심도있게 공부해 보아야 함
   boost::python 이 존재하는데, 민기의 tod 엔진 커널에서 구현한 방법과 매우 유사한 면이 있음 그래서 어떻게 할까 생각중


10. C++에서 python에 데이터를 노출시켜야 하는데, 배열형태의 데이터를 어떻게 노출시키는지... 공부해야 할듯
